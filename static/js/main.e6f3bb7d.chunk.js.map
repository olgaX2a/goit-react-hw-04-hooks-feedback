{"version":3,"sources":["components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","components/Controls/Controls.jsx","components/FeedbackOptions/FeedbackOptions.jsx","App.js","index.js"],"names":["Section","title","children","className","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","Controls","name","cbOnClick","type","onClick","FeedbackOptions","options","onLeaveFeedback","map","option","App","useState","setGood","setNeutral","setBad","totalVotes","toFixed","event","target","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUAgBeA,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASC,UAAU,UAAnB,UACE,oBAAIA,UAAU,iBAAd,SAAgCF,IAC/BC,MCuCQE,G,MA3CI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qBAAIN,UAAU,iBAAd,UACE,oBAAIA,UAAU,uBAAd,SACE,oBAAGA,UAAU,uBAAb,kBAEE,sBAAMA,UAAU,uBAAhB,SAAwCE,SAG5C,oBAAIF,UAAU,uBAAd,SACE,oBAAGA,UAAU,uBAAb,qBAEE,sBAAMA,UAAU,uBAAhB,SAAwCG,SAG5C,oBAAIH,UAAU,uBAAd,SACE,oBAAGA,UAAU,uBAAb,iBAEE,sBAAMA,UAAU,uBAAhB,SAAwCI,SAG5C,oBAAIJ,UAAU,uBAAd,SACE,oBAAGA,UAAU,uBAAb,mBAEE,sBAAMA,UAAU,uBAAhB,SAAwCK,SAG5C,oBAAIL,UAAU,uBAAd,SACE,oBAAGA,UAAU,uBAAb,+BAEE,uBAAMA,UAAU,uBAAhB,UAAwCM,EAAxC,iBCvBKC,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCeEC,G,YAhBE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACxB,OACE,wBACED,KAAMA,EACNE,KAAK,SACLZ,UAAU,gBACVa,QAASF,EAJX,SAMGD,MCGQI,EAZS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,oBAAIhB,UAAU,eAAd,SACGe,EAAQE,KAAI,SAACC,GAAD,OACX,oBAAiBlB,UAAU,qBAA3B,SACE,cAAC,EAAD,CAAUU,KAAMQ,EAAQP,UAAWK,KAD5BE,SCoDFC,MAnDf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOlB,EAAP,KAAamB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOjB,EAAP,KAAgBmB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOhB,EAAP,KAAYmB,EAAZ,KACMC,EAAatB,EAAOC,EAAUC,EAC9BE,GAAuBJ,EAAOsB,EAAc,KAAKC,QAAQ,GAqB/D,OACE,qCACE,cAAC,EAAD,CAAS3B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEiB,QAvBc,CAAC,OAAQ,UAAW,OAwBlCC,gBAtBQ,SAACU,GAEf,OADiBA,EAAMC,OAAfjB,MAEN,IAAK,OACHW,GAAQ,SAACO,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHN,GAAW,SAACM,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHL,GAAO,SAACK,GAAD,OAAeA,EAAY,KAClC,MACF,QACE,aAYF,cAAC,EAAD,CAAS9B,MAAM,aAAf,SACG0B,EACC,cAAC,EAAD,CACEtB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,EACPlB,mBAAoBA,IAGtB,cAAC,EAAD,CAAcE,QAAQ,4BC9ChCqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e6f3bb7d.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport \"./Section.css\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className=\"Section\">\n      <h2 className=\"Section__title\">{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import \"./Statistics.css\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <ul className=\"StatisticsList\">\n      <li className=\"StatisticsList__item\">\n        <p className=\"StatisticsList__text\">\n          Good:\n          <span className=\"StatisticsList__data\">{good}</span>\n        </p>\n      </li>\n      <li className=\"StatisticsList__item\">\n        <p className=\"StatisticsList__text\">\n          Neutral:\n          <span className=\"StatisticsList__data\">{neutral}</span>\n        </p>\n      </li>\n      <li className=\"StatisticsList__item\">\n        <p className=\"StatisticsList__text\">\n          Bad:\n          <span className=\"StatisticsList__data\">{bad}</span>\n        </p>\n      </li>\n      <li className=\"StatisticsList__item\">\n        <p className=\"StatisticsList__text\">\n          Total:\n          <span className=\"StatisticsList__data\">{total}</span>\n        </p>\n      </li>\n      <li className=\"StatisticsList__item\">\n        <p className=\"StatisticsList__text\">\n          Positive feedback:\n          <span className=\"StatisticsList__data\">{positivePercentage}%</span>\n        </p>\n      </li>\n    </ul>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;\n","// import \"./Notification.css\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import \"./Controls.css\";\nimport PropTypes from \"prop-types\";\n\nconst Controls = ({ name, cbOnClick }) => {\n  return (\n    <button\n      name={name}\n      type=\"button\"\n      className=\"Controls__btn\"\n      onClick={cbOnClick}\n    >\n      {name}\n    </button>\n  );\n};\n\nControls.propTypes = {\n  name: PropTypes.string.isRequired,\n};\nexport default Controls;\n","import \"./FeedbackOptions.css\";\nimport Controls from \"../Controls\";\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul className=\"ControlsList\">\n      {options.map((option) => (\n        <li key={option} className=\"ControlsList__item\">\n          <Controls name={option} cbOnClick={onLeaveFeedback} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default FeedbackOptions;\n","import React from 'react'\nimport { useState } from 'react'\nimport Section from './components/Section'\nimport Statistics from './components/Statistics'\nimport Notification from './components/Notification'\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions'\n\nfunction App() {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const totalVotes = good + neutral + bad\n  const positivePercentage = ((good / totalVotes) * 100).toFixed(2)\n\n  const controlTitles = ['good', 'neutral', 'bad']\n\n  const addVote = (event) => {\n    const { name } = event.target\n    switch (name) {\n      case 'good':\n        setGood((prevState) => prevState + 1)\n        break\n      case 'neutral':\n        setNeutral((prevState) => prevState + 1)\n        break\n      case 'bad':\n        setBad((prevState) => prevState + 1)\n        break\n      default:\n        return\n    }\n  }\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={controlTitles}\n          onLeaveFeedback={addVote}\n        ></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistics\">\n        {totalVotes ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={totalVotes}\n            positivePercentage={positivePercentage}\n          ></Statistics>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </>\n  )\n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}